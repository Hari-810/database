What are Subqueries?
    A subquery is a query nested inside another query, typically within a SELECT, INSERT, UPDATE, or DELETE statement. 
    Subqueries can be used to perform complex queries by breaking them down into simpler parts. 
    They can return a single value, a single row, a single column, or an entire table.

Types of Subqueries:
    Single-Row Subqueries:

        Returns a single row with one or more columns.
        Often used with comparison operators like =, >, <, >=, <=, <>.

    Multiple-Row Subqueries:

        Returns more than one row.
        Typically used with IN, ANY, ALL, or EXISTS operators.

    Multiple-Column Subqueries:

        Returns more than one column.
        Often used in WHERE or SELECT clauses.

    Correlated Subqueries:

        A subquery that references columns from the outer query.
        Executed once for each row in the outer query.

    Scalar Subqueries:

        Returns a single value (a single cell).
        Can be used anywhere a single value is expected, like in SELECT or WHERE clauses.


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Create and Use Subqueries


*******************************************************************************************


Single-Row Subquery
    Example: Find the name of the customer who placed the order with OrderID = 10248.

            SELECT CustomerName
            FROM Customers
            WHERE CustomerID = (SELECT CustomerID FROM Orders WHERE OrderID = 10248);


    The inner query (SELECT CustomerID FROM Orders WHERE OrderID = 10248) returns the CustomerID for OrderID = 10248.
    The outer query uses this CustomerID to find the CustomerName.

*******************************************************************************************

Multiple-Row Subquery
    Example: Find the names of customers who placed orders handled by EmployeeID = 3.

            SELECT CustomerName
            FROM Customers
            WHERE CustomerID IN (SELECT CustomerID FROM Orders WHERE EmployeeID = 3);
    
    The subquery returns a list of CustomerID values from Orders where EmployeeID = 3.
    The outer query then finds the names of those customers.

*******************************************************************************************

Multiple-Column Subquery
    Example: Find the CustomerName and ContactName of customers who placed orders on '1996-07-04'.

            SELECT CustomerName, ContactName
            FROM Customers
            WHERE (CustomerID, CustomerName) IN
            (SELECT CustomerID, CustomerName FROM Orders WHERE OrderDate = '1996-07-04');

    The subquery returns both CustomerID and CustomerName for orders placed on '1996-07-04'.
    The outer query matches both values in the Customers table.

    
*******************************************************************************************

Correlated Subquery
    Example: List all customers with orders greater than 5 items.

            SELECT CustomerName
            FROM Customers c
            WHERE 5 < (SELECT COUNT(*) FROM Orders o WHERE o.CustomerID = c.CustomerID);

    The subquery is correlated because it references c.CustomerID from the outer query.
    For each row in Customers, the subquery counts the number of orders for that customer, returning those with more than 5 orders.
        
*******************************************************************************************

Scalar Subquery
    Example: Get the price of the product with ProductID = 10.

            SELECT ProductName, 
            (SELECT Price FROM Products WHERE ProductID = 10) AS ProductPrice
            FROM Products
            WHERE ProductID = 10;

    The subquery returns a single value (price of the product) which is then used in the SELECT clause.
        
*******************************************************************************************


Practical Uses of Subqueries
    Filtering Data: Subqueries are commonly used in the WHERE clause to filter data based on complex conditions.
    Aggregating Data: Subqueries can be used to perform calculations or aggregations that are then used in the main query.
    Complex Joins: Subqueries can replace joins in some scenarios where a direct join might not be possible or efficient.


Considerations
    Performance: Subqueries, especially correlated ones, can be slow. In some cases, a JOIN might be more efficient.
    Readability: While subqueries can simplify complex logic, they can also make a query harder to understand if overused.
    By understanding and using these different types of subqueries, you can handle a wide range of database queries and perform complex operations efficiently.







A stored procedure is a precompiled collection of SQL statements that are stored and executed on the database server. 
Stored procedures allow you to encapsulate complex SQL logic and operations into a reusable unit that can be invoked with a single call.


Key Features of Stored Procedures:
    Encapsulation of Logic:
        Stored procedures allow you to group multiple SQL statements into a single procedure. This encapsulates the logic, making it easier to manage and maintain.
    
    Reusable Code:
        Once created, a stored procedure can be called multiple times from different places in your application, reducing redundancy and promoting code reuse.
    
    Performance:
        Stored procedures are precompiled and stored in the database, which can lead to performance improvements. The database server does not need to compile the SQL statements each time the procedure is executed.
    
    Security:
        Stored procedures can enhance security by restricting direct access to tables. Users can be granted permissions to execute stored procedures without having direct access to the underlying tables.
    
    Parameters:
        Stored procedures can accept input parameters and return output parameters, making them versatile for a wide range of operations.
    
    Error Handling:
        You can include error handling and transaction management within stored procedures to handle complex logic and maintain data integrity.
 
Basic Syntax

    CREATE PROCEDURE procedure_name ([parameters])
    BEGIN
        -- SQL statements
    END;


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Example: Creating a Stored Procedure

Suppose you want to create a stored procedure to get all orders placed by a specific customer. 
Hereâ€™s how you could create it:


*******************************************************************************************

DELIMITER $$

CREATE PROCEDURE GetCustomerOrders(IN custID INT)
BEGIN
    SELECT Orders.OrderID, Orders.OrderDate, Customers.CustomerName
    FROM Orders
    INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID
    WHERE Orders.CustomerID = custID;
END $$

DELIMITER ;

*******************************************************************************************

Explanation:
    DELIMITER $$: Changes the statement delimiter to $$ so that the procedure can contain semicolons (;) without prematurely ending the procedure definition.
    IN custID INT: Defines an input parameter named custID of type INT.
    SELECT statement: Fetches orders for the given CustomerID.
    END $$: Ends the procedure definition.
    DELIMITER ;: Resets the delimiter back to the default ;.


How to Use (Call) a Stored Procedure
    Once you have created the stored procedure, you can call it using the CALL statement.

    To get orders for a customer with CustomerID = 90:

*******************************************************************************************

    CALL GetCustomerOrders(90);

*******************************************************************************************




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Creating a Stored Procedure with Multiple Statements

You can create a stored procedure that includes multiple SQL statements, such as inserting an order and returning the generated OrderID.


*******************************************************************************************


DELIMITER $$

CREATE PROCEDURE AddOrder(
    IN custID INT,
    IN empID INT,
    IN shipperID INT,
    OUT newOrderID INT
)
BEGIN
    -- Insert a new order
    INSERT INTO Orders (CustomerID, EmployeeID, OrderDate, ShipperID)
    VALUES (custID, empID, CURDATE(), shipperID);
    
    -- Retrieve the last inserted ID
    SET newOrderID = LAST_INSERT_ID();
END $$

DELIMITER ;


*******************************************************************************************


Explanation:
    OUT newOrderID INT: An output parameter that will store the newly inserted OrderID.
    CURDATE(): Inserts the current date as the order date.
    LAST_INSERT_ID(): Retrieves the last inserted ID in the current session, which is the new OrderID.

Calling the Procedure and Getting the Output
    To add a new order and get the generated OrderID:

*******************************************************************************************

SET @newOrderID = 0;

CALL AddOrder(1, 2, 3, @newOrderID);

SELECT @newOrderID;

*******************************************************************************************

Summary
    Stored procedures are powerful tools for managing SQL operations efficiently and securely. 
    They help in encapsulating logic, reusing code, and maintaining consistency in database operations. 
    By using stored procedures, you can improve the performance and manageability of your database applications.






